
Given an array of size n, find the majority element. The majority element is the element that appears more than ⌊ n/2 ⌋ times.
You may assume that the array is non-empty and the majority element always exist in the array.

给定一个大小为 n 的数组，找到其中的众数。众数是指在数组中出现次数大于 ⌊ n/2 ⌋ 的元素。
你可以假设数组是非空的，并且给定的数组总是存在众数。

示例 :
输入: [3,2,3]  输出: 3
输入: [2,2,1,1,1,2,2]  输出: 2

思路：
摩尔投票法 Moore Voting，需要O(n)的时间和O(1)的空间。（先假设再验证）
这种投票法先将第一个数字假设为众数，然后把计数器设为1，比较下一个数和此数是否相等，若相等则计数器加一，反之减一。
然后看此时计数器的值，若为零，则将下一个值设为候选众数。以此类推直到遍历完整个数组，当前候选众数即为该数组的众数。
这个方法的前提是，数组众数一定要存在。

class Solution(object):
    def findMode(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        
        for i in range(len(nums)):
            count=1
            mode=nums[i]
            if nums[i+1]=mode:
               count+=1
            else:
                count-=1
            if count=0:
                mode=nums[i+1]
        return mode
        
        
        
 # 参考答案：排序取中间。。。。。。???中位数
 class Solution(object):
    def majorityElement(self, num):
        return sorted(num)[len(num)/2]
                




