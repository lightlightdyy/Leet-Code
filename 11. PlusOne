"""
Given a non-empty array of digits representing a non-negative integer, plus one to the integer.
The digits are stored such that the most significant digit is at the head of the list, and each element in the array contain a single digit.
You may assume the integer does not contain any leading zero, except the number 0 itself.

给定一个由整数组成的非空数组所表示的非负整数，在该数的基础上加一。最高位数字存放在数组的首位， 数组中每个元素只存储一个数字。
你可以假设除了整数 0 之外，这个整数不会以零开头。

Example 1: Input: [1,2,3] Output: [1,2,4]
Explanation: The array represents the integer 123.

Example 2: Input: [4,3,2,1] Output: [4,3,2,2]
Explanation: The array represents the integer 4321.


"""

# 解1
def plusOne(digits):
    num = 0
    for i in range(len(digits)):
    	num += digits[i] * pow(10, (len(digits)-1-i))
    return [int(i) for i in str(num+1)]
    
 # 解2   
整数列表 -> 字符串 -> 整数 -> +1 ->字符串 -> 整数列表。
有点无脑，效率也可。 beat 63% 24ms.
测试地址： https://leetcode.com/problems/plus-one/description/
class Solution(object):
    def plusOne(self, digits):
        """
        :type digits: List[int]
        :rtype: List[int]
        """
        
        return list(map(int, list(str(int(''.join(map(str, digits)))+1))))
     
a=map(str, digits)
b=''.join(a)
c=int(b)+1
d=list(str(c))
e=list(str(c))
list(e)
     
## 注：
## map
例1：把这个list所有数字转为字符串： map(str, [1, 2, 3, 4, 5, 6]) = ['1', '2', '3', '4', '5', '6']
例2: map(lambda x, y: x + y, [1, 3, 5, 7, 9], [2, 4, 6, 8, 10]) = [3, 7, 11, 15, 19]
例3: def f(x):
         return x * x
    map(f, [1, 2, 3, 4, 5, 6, 7, 8, 9]) = [1, 4, 9, 16, 25, 36, 49, 64, 81]
    
 
 # join 
  str.join(sequence)
  
s1 = "-"
s2 = ""
seq = ("r", "u", "n", "o", "o", "b") # 字符串序列
print (s1.join( seq )) = r-u-n-o-o-b
print (s2.join( seq )) = runoob
